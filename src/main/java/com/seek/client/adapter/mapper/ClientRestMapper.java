package com.seek.client.adapter.mapper;

import com.seek.client.adapter.in.rest.dto.request.ClientRequest;
import com.seek.client.adapter.in.rest.dto.response.ClientResponse;
import com.seek.client.adapter.out.persistence.entity.ClientEntity;
import com.seek.client.domain.model.Client;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.factory.Mappers;

/**
 * MapStruct mapper interface for converting between REST DTOs and the {@link Client} domain model.
 * This interface handles mappings from incoming requests to domain objects and from domain objects to API responses.
 */
@Mapper(componentModel = "spring")
public interface ClientRestMapper {

    /**
     * Singleton instance of the mapper for manual usage if needed.
     */
    ClientRestMapper INSTANCE = Mappers.getMapper(ClientRestMapper.class);

    /**
     * Maps a {@link ClientRequest} DTO to a {@link Client} domain object.
     * The ID and client code are ignored and should be generated by the system.
     *
     * @param request the incoming client creation request
     * @return the corresponding {@link Client} domain object
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "clientCode", ignore = true)
    Client toDomain(ClientRequest request);

    /**
     * Maps a {@link Client} domain object to a {@link ClientResponse} DTO.
     * Includes computed fields such as age and estimated death date.
     *
     * @param client the domain object to convert
     * @return the corresponding API response DTO
     */
    @Mapping(target = "age", expression = "java(client.getAge())")
    @Mapping(target = "estimatedDeathDate", expression = "java(client.getBirthDate().plusYears(80))")
    ClientResponse toResponse(Client client);
}